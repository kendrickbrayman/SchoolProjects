import unittest
from ddt import ddt, data, unpack
import valueIteration as targetCode  # change to file name

rewardTable = {(0, 0): {(0, 1): {(0, 1): -0.04, (1, 0): -0.04, (0, 0): -0.04}, (0, -1): {(0, 0): -0.04, (1, 0): -0.04}, (1, 0): {(1, 0): -0.04, (0, 0): -0.04, (0, 1): -0.04}, (-1, 0): {(0, 0): -0.04, (0, 1): -0.04}}, (0, 1): {(0, 1): {(0, 2): -0.04, (0, 1): -0.04}, (0, -1): {(0, 0): -0.04, (0, 1): -0.04}, (1, 0): {(0, 1): -0.04, (0, 0): -0.04, (0, 2): -0.04}, (-1, 0): {(0, 1): -0.04, (0, 2): -0.04, (0, 0): -0.04}}, (0, 2): {(0, 1): {(0, 2): -0.04, (1, 2): -0.04}, (0, -1): {(0, 1): -0.04, (0, 2): -0.04, (1, 2): -0.04}, (1, 0): {(1, 2): -0.04, (0, 1): -0.04, (0, 2): -0.04}, (-1, 0): {(0, 2): -0.04, (0, 1): -0.04}}, (1, 0): {(0, 1): {(1, 0): -0.04, (2, 0): -0.04, (0, 0): -0.04}, (0, -1): {(1, 0): -0.04, (0, 0): -0.04, (2, 0): -0.04}, (1, 0): {(2, 0): -0.04, (1, 0): -0.04}, (-1, 0): {(0, 0): -0.04, (1, 0): -0.04}}, (1, 2): {(0, 1): {(1, 2): -0.04, (2, 2): -0.04, (0, 2): -0.04}, (0, -1): {(1, 2): -0.04, (0, 2): -0.04, (2, 2): -0.04}, (1, 0): {(2, 2): -0.04, (1, 2): -0.04}, (-1, 0): {(0, 2): -0.04, (1, 2): -0.04}}, (2, 0): {(0, 1): {(2, 1): -0.04, (3, 0): 1, (1, 0): -0.04}, (0, -1): {(2, 0): -0.04, (1, 0): -0.04, (3, 0): 1}, (1, 0): {(3, 0): 1, (2, 0): -0.04, (2, 1): -0.04}, (-1, 0): {(1, 0): -0.04, (2, 1): -0.04, (2, 0): -0.04}}, (2, 1): {(0, 1): {(2, 2): -0.04, (3, 1): -1, (2, 1): -0.04}, (0, -1): {(2, 0): -0.04, (2, 1): -0.04, (3, 1): -1}, (1, 0): {(3, 1): -1, (2, 0): -0.04, (2, 2): -0.04}, (-1, 0): {(2, 1): -0.04, (2, 2): -0.04, (2, 0): -0.04}}, (2, 2): {(0, 1): {(2, 2): -0.04, (3, 2): -0.04, (1, 2): -0.04}, (0, -1): {(2, 1): -0.04, (1, 2): -0.04, (3, 2): -0.04}, (1, 0): {(3, 2): -0.04, (2, 1): -0.04, (2, 2): -0.04}, (-1, 0): {(1, 2): -0.04, (2, 2): -0.04, (2, 1): -0.04}}, (3, 2): {(0, 1): {(3, 2): -0.04, (2, 2): -0.04}, (0, -1): {(3, 1): -1, (2, 2): -0.04, (3, 2): -0.04}, (1, 0): {(3, 2): -0.04, (3, 1): -1}, (-1, 0): {(2, 2): -0.04, (3, 2): -0.04, (3, 1): -1}}}
transitionTable = {(0, 0): {(0, 1): {(0, 1): 0.8, (1, 0): 0.09999999999999998, (0, 0): 0.09999999999999998}, (0, -1): {(0, 0): 0.9, (1, 0): 0.09999999999999998}, (1, 0): {(1, 0): 0.8, (0, 0): 0.09999999999999998, (0, 1): 0.09999999999999998}, (-1, 0): {(0, 0): 0.9, (0, 1): 0.09999999999999998}}, (0, 1): {(0, 1): {(0, 2): 0.8, (0, 1): 0.19999999999999996}, (0, -1): {(0, 0): 0.8, (0, 1): 0.19999999999999996}, (1, 0): {(0, 1): 0.8, (0, 0): 0.09999999999999998, (0, 2): 0.09999999999999998}, (-1, 0): {(0, 1): 0.8, (0, 2): 0.09999999999999998, (0, 0): 0.09999999999999998}}, (0, 2): {(0, 1): {(0, 2): 0.9, (1, 2): 0.09999999999999998}, (0, -1): {(0, 1): 0.8, (0, 2): 0.09999999999999998, (1, 2): 0.09999999999999998}, (1, 0): {(1, 2): 0.8, (0, 1): 0.09999999999999998, (0, 2): 0.09999999999999998}, (-1, 0): {(0, 2): 0.9, (0, 1): 0.09999999999999998}}, (1, 0): {(0, 1): {(1, 0): 0.8, (2, 0): 0.09999999999999998, (0, 0): 0.09999999999999998}, (0, -1): {(1, 0): 0.8, (0, 0): 0.09999999999999998, (2, 0): 0.09999999999999998}, (1, 0): {(2, 0): 0.8, (1, 0): 0.19999999999999996}, (-1, 0): {(0, 0): 0.8, (1, 0): 0.19999999999999996}}, (1, 2): {(0, 1): {(1, 2): 0.8, (2, 2): 0.09999999999999998, (0, 2): 0.09999999999999998}, (0, -1): {(1, 2): 0.8, (0, 2): 0.09999999999999998, (2, 2): 0.09999999999999998}, (1, 0): {(2, 2): 0.8, (1, 2): 0.19999999999999996}, (-1, 0): {(0, 2): 0.8, (1, 2): 0.19999999999999996}}, (2, 0): {(0, 1): {(2, 1): 0.8, (3, 0): 0.09999999999999998, (1, 0): 0.09999999999999998}, (0, -1): {(2, 0): 0.8, (1, 0): 0.09999999999999998, (3, 0): 0.09999999999999998}, (1, 0): {(3, 0): 0.8, (2, 0): 0.09999999999999998, (2, 1): 0.09999999999999998}, (-1, 0): {(1, 0): 0.8, (2, 1): 0.09999999999999998, (2, 0): 0.09999999999999998}}, (2, 1): {(0, 1): {(2, 2): 0.8, (3, 1): 0.09999999999999998, (2, 1): 0.09999999999999998}, (0, -1): {(2, 0): 0.8, (2, 1): 0.09999999999999998, (3, 1): 0.09999999999999998}, (1, 0): {(3, 1): 0.8, (2, 0): 0.09999999999999998, (2, 2): 0.09999999999999998}, (-1, 0): {(2, 1): 0.8, (2, 2): 0.09999999999999998, (2, 0): 0.09999999999999998}}, (2, 2): {(0, 1): {(2, 2): 0.8, (3, 2): 0.09999999999999998, (1, 2): 0.09999999999999998}, (0, -1): {(2, 1): 0.8, (1, 2): 0.09999999999999998, (3, 2): 0.09999999999999998}, (1, 0): {(3, 2): 0.8, (2, 1): 0.09999999999999998, (2, 2): 0.09999999999999998}, (-1, 0): {(1, 2): 0.8, (2, 2): 0.09999999999999998, (2, 1): 0.09999999999999998}}, (3, 2): {(0, 1): {(3, 2): 0.9, (2, 2): 0.09999999999999998}, (0, -1): {(3, 1): 0.8, (2, 2): 0.09999999999999998, (3, 2): 0.09999999999999998}, (1, 0): {(3, 2): 0.9, (3, 1): 0.09999999999999998}, (-1, 0): {(2, 2): 0.8, (3, 2): 0.09999999999999998, (3, 1): 0.09999999999999998}}}
Vdict = {(0, 0): 0.3006999631855122, (0, 1): 0.18148562541322333, (0, 2): 0.0910780351705564, (1, 0): 0.4720705180583616, (1, 1): 0, (1, 2): 0.09551416585761563, (2, 0): 0.6820925552657521, (2, 1): 0.3440643861305526, (2, 2): 0.18786247662706515, (3, 0): 1, (3, 1): -1, (3, 2): 0.0002520884435509921}
normalCost = -0.04
trapDict = {(3, 1): -1}
bonusDict = {(3, 0): 1}
blockList = [(1, 1)]
roundingTolerance = 10e-7
gamma = 0.8

@ddt
class testValueIteration(unittest.TestCase):

    def assertNumericDictAlmostEqual(self, calculatedDictionary, expectedDictionary, places=7):
        self.assertEqual(calculatedDictionary.keys(), expectedDictionary.keys())
        for key in calculatedDictionary.keys():
            self.assertAlmostEqual(calculatedDictionary[key], expectedDictionary[key], places=places)

    @data(((2,0),
          (1,0),
          rewardTable,
          transitionTable,
        {((3, 0), 1): 0.8, ((2, 0), -0.04): 0.09999999999999998, ((2, 1), -0.04): 0.09999999999999998}))
    @unpack
    def testSPrimeDist(self, s,action, rTable, tTable, expectedResult):
        calculatedResult = targetCode.getSPrimeRDistribution(s,action,rTable,tTable)

        self.assertNumericDictAlmostEqual(calculatedResult, expectedResult, places=4)

    @data(((1, 2),
           (-1, 0),
           Vdict,
           transitionTable,
           0.09196526130796825))
    @unpack
    def testExpect(self, s, action, V, tTable, expectedResult):
        calculatedResult = targetCode.getExpected(s, action, V, tTable)

        self.assertAlmostEqual(calculatedResult, expectedResult,places=4)

    @data(((3,0),
           bonusDict,
           trapDict,
           normalCost,
           1
    ))
    @unpack
    def testGetReward(self,s,bonus,trap,cost,expectedResult):
        calculatedResult = targetCode.getReward(s,bonus,trap,cost)
        self.assertAlmostEqual(calculatedResult, expectedResult, places=4)
    @data((
            {(0, 1): 0.1598666067317688, (0, -1): 0.2848281343345588, (1, 0): 0.053394357030602566, (-1, 0): 0.12960401896185428},
           roundingTolerance,
            {(0, -1): 1.0}
    ))
    @unpack
    def testPolicy(self,Q,rounding,expectedResult):
        calculatedResult = targetCode.policy(Q,rounding)
        self.assertAlmostEqual(calculatedResult, expectedResult, places=4)

    @data(((2,2),
           targetCode.policy,
           Vdict,
           transitionTable,
           rewardTable,
           gamma,
           roundingTolerance,
           blockList,
           bonusDict,
           trapDict,
           normalCost,
           0.18786250746764702
    ))
    @unpack
    def testStateEV(self,s, policy, V, transitionTable, rewardTable, gamma,roundingTolerance,block,bonus,trap,cost,expectedResult):
        calculatedResult = targetCode.stateExpectedValue(s,policy,V,transitionTable,rewardTable,gamma,roundingTolerance,block,bonus,trap,cost)
        self.assertAlmostEqual(calculatedResult, expectedResult, places=4)

    @data((
            (2,0),
        Vdict,
        transitionTable,
        {(1, 0): 1.0}
    ))
    @unpack
    def testMove(self,s,V,transitionTable,expectedResult):
        calculatedResult = targetCode.getMove(s,V,transitionTable)
        self.assertNumericDictAlmostEqual(calculatedResult, expectedResult, places=4)


if __name__ == '__main__':
    unittest.main(verbosity=2)
